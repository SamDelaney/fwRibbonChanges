#!/bin/bash
# Initializes and clones git repos needed for FW development
#
# Usage:
# initrepo [--reset|--modify]
#     --reset: reset repo by asking all questions and performing all initializations again
#     --modify: allow to change the selection of repos and branches. Note: this doesn't delete
#               any repos or branches.

set -e

GERRIT="gerrit.lsdev.sil.org"
GERRITPORT=59418
FWMETAREPO=fwmeta
TOOLSDIR=fwmeta

# Version of the alias section in the config file. Increment the number each time you make some
# changes to setting the alias/guitool section below so that the config gets updated when this
# script is run.
THISALIASVERSION=8

# Display help
help()
{
echo -e "Usage:\
\n    $(basename "$0") [options]

Options:\
\n    --reset    Reset repo by asking all questions and performing all\
\n               initializations again.\
\n    --modify   Allow changing the selection of repos and branches.\
\n               Note: this doesn't delete any repos or branches.\
\n    -h|--help  Display this help screen.\
\n    --debug    Output debug information.\
\n"
}

# Get the directory of the fwmeta repo. We can't do that in functions.sh because we need to
# know the directory before we can include functions.sh!
getfwmetadirBootStrap()
{
	local dir olddir curdir
	curdir=$(pwd)
	dir=$curdir

	while true; do
		cd $dir
		dir=$(git rev-parse --show-toplevel 2> /dev/null)
		if [ -z $dir ]; then
			echo "$curdir"
			return
		fi
		cd $dir
		if [ -d $TOOLSDIR ] && git config --file .git/config --get fwinit.initialized >/dev/null; then
			echo "$dir"
			return
		else
			olddir="$dir"
			dir=$(dirname "$dir")
			if [ "$olddir" = "$dir" ]; then
				echo "$curdir"
				return
			fi
		fi
	done
}

# Clone the repo $1
# Parameters:
# $1 repo name
# $2 directory where $repo is located on local disc
clonerepo()
{
	local repo loc

	repo=$1
	loc="$2"

	git init "$loc"
	cd "$loc"

	# Initialize origin
	if [ "$reset" = "1" ] || ! git remote | grep -q origin; then
		repouri="$(getHostForRepo $repo)"
		git remote rm origin 2>/dev/null || true
		git remote add origin "$repouri/$repo.git"
	fi

	# setup push URL
	if [ "$reset" = "1" ] || \
		! git config --get-all remote.origin.pushurl | grep -q "ssh://$gerritusername@$GERRIT:$GERRITPORT/$repo.git"; then
		git remote set-url --push origin "ssh://$gerritusername@$GERRIT:$GERRITPORT/$repo.git"
	fi

	if [ "$reset" = "1" ]; then
		git config --unset fwinit.initialized || true
		git config --unset fwinit.aliasversion || true
	fi

	# Remove all fetch and push statements for origin so that we can add
	# them again
	git config --unset-all remote.origin.fetch || true
	git config --unset-all remote.origin.push  || true

	# update settings for notes
	git config notes.rewrite.amend true
	git config notes.rewrite.rebase true
	git config notes.rewriteRef "refs/notes/*"
	git config notes.displayRef "refs/notes/*"
	git config --add remote.origin.fetch "+refs/notes/*:refs/notes/*"

	# fetch branches and setup tracking branch
	for branch in $branchlist; do
		# only add existing branches
		if [ $(git ls-remote origin refs/heads/$branch | wc -l) -gt 0 ]; then
			git config --add remote.origin.fetch "+refs/heads/$branch:refs/remotes/origin/$branch"
			git config --add remote.origin.push "+refs/heads/$branch:refs/for/$branch"
			git config branch.$branch.rebase true
			git config branch.$branch.remote origin
			git config branch.$branch.merge refs/heads/$branch
		fi
	done
	git fetch origin

	# we need the master and develop branches so that we can successfully initialize git-flow
	if ! git branch | grep -q master; then
		git checkout -q master
	fi
	if ! git branch | grep -q develop; then
		git checkout -q develop
	fi
}

# Initialize git repo $1.
# Parameters:
# $1 repo name
# $2 directory where $repo is located on local disc
# $3 top level directory that contains $TOOLSDIR subdirectory
initrepo()
{
	local repo loc basedir

	repo=$1
	loc="$2"
	basedir="$3"

	echo
	echo -e "${_bold}Initializing project $repo${_normal}"
	[ $DEBUG ] && echo "basedir in initrepo=$basedir"

	cwd=$(pwd)

	clonerepo $repo "$loc"

	# update settings for whitespace checking. If it's necessary to change the behavior for
	# certain file types we can add a line to .gitattributes, e.g.
	# *.py whitespace=-indent-with-non-tab
	git config core.whitespace "blank-at-eol,space-before-tab,indent-with-non-tab,blank-at-eof,tabwidth=4"
	git config apply.ignorewhitespace change
	git config apply.whitespace fix

	# Set branch defaults
	git config branch.autosetupmerge true
	git config branch.autosetuprebase always

	# install hooks
	if [ "$reset" = "1" -o ! -f .git/hooks/commit-msg -o ! -f .git/hooks/commit-msg1_add-change-id ]; then
		echo "Installing hooks:"
		if [ \( "$reset" = "1" -a "$repo" = "fwmeta" \) -o ! -f "$basedir/.git/hooks/commit-msg1_add-change-id" ]; then
			# This is fwmeta repo. Get hook directly from Gerrit server
			scp -p -P $GERRITPORT "$gerritusername@$GERRIT:hooks/commit-msg" .git/hooks/commit-msg1_add-change-id
		else
			# Other FW repos. Get hook from fwmeta.
			cp "$basedir/.git/hooks/commit-msg1_add-change-id" .git/hooks/
		fi
		cp "$basedir/fwmeta/hooks/check-commit-message" .git/hooks/commit-msg0_check-message
		cp -f "$basedir/fwmeta/hooks/pre-commit" .git/hooks/
		cp -f "$basedir/fwmeta/hooks/commit-msg" .git/hooks/
		# make it less likely that user replaces it accidentally
		chmod -w .git/hooks/pre-commit
		chmod -w .git/hooks/commit-msg
	fi

	# Initialize git flow
	if ! git config --get gitflow.branch.master &>/dev/null || [ "$reset" = "1" ]; then
		git flow init -d -f
	fi

	if [ "$(git config --get fwinit.aliasversion)" != "$THISALIASVERSION"  -o "$reset" = "1" ]; then
		# adding some alias
		echo "Adding alias:"
		if ! git config --get fwinit.initialized &>/dev/null || [ "$reset" = "1" ]; then
			giteditor="$(git config --get fwinit.editor || true)"
			gitguieditor="$(git config --get fwinit.guieditor || true)"
			if [ "$(uname)" = "Linux" ]; then
				gitguieditor="${gitguieditor:-gedit -w}"
			else
				gitguieditor="${gitguieditor:-$(dirname $0)/winedit.sh}"
			fi
			giteditor="${giteditor:-$gitguieditor}"
			git config core.editor "$giteditor"
			git config gui.editor "$gitguieditor"
			git config merge.tool "$mergetool"
			git config diff.guitool "$mergetool"
			git config fwinit.initialized 1
		fi
		if [ "$(git config --get fwinit.aliasversion || echo -1)" -lt "2" -o "$reset" = "1" ]; then
			# Clean up old obsolete entries
			git config --remove-section "guitool.Bypass Code Review" 2> /dev/null || true
			git config --remove-section "guitool.Feature/Start" 2> /dev/null || true
			git config --remove-section "guitool.Feature/Submit for Code Review" 2> /dev/null || true
			git config --remove-section "guitool.Feature/Finish" 2> /dev/null || true
			git config --remove-section "guitool.Feature/Publish" 2> /dev/null || true
			git config --remove-section "guitool.Feature/Track" 2> /dev/null || true
			git config --remove-section "guitool.Release/Start" 2> /dev/null || true
			git config --remove-section "guitool.Release/Submit for Code Review" 2> /dev/null || true
			git config --remove-section "guitool.Release/Finish" 2> /dev/null || true
			git config --remove-section "guitool.Release/Publish" 2> /dev/null || true
			git config --remove-section "guitool.Release/Track" 2> /dev/null || true
			git config --remove-section "guitool.Hotfix/Start" 2> /dev/null || true
			git config --remove-section "guitool.Hotfix/Submit for Code Review" 2> /dev/null || true
			git config --remove-section "guitool.Hotfix/Finish" 2> /dev/null || true
			git config --remove-section "guitool.Support/Start" 2> /dev/null || true
			git config --remove-section "guitool.Support/Submit for Code Review" 2> /dev/null || true
			git config --remove-section "guitool.Support/Finish" 2> /dev/null || true
			git config --remove-section "guitool. Visual Diff" 2> /dev/null || true
		fi
		if [ "$(git config --get fwinit.aliasversion || echo -1)" -lt "8" -o "$reset" = "1" ]; then
			# More cleanup
			git config --remove-section "guitool.Interactive Rebase" 2> /dev/null || true
			git config --remove-section "guitool.Interactive Rebase (Continue)" 2> /dev/null || true
			git config --remove-section "guitool.Interactive Rebase (Abort)" 2> /dev/null || true
			git config --remove-section guitool.Rebase 2> /dev/null || true
		fi

		sedReplace="$basedir/$TOOLSDIR"
		sedReplace=${sedReplace//\//\\\/} # replace all / with \/
		git config alias.featfin '!sh -c "SEDREPLACE/featfin.sh \$1" -'
		git config alias.review '!sh -c "SEDREPLACE/review.sh \$1 \$2" -'
		git config alias.release '!sh -c "SEDREPLACE/relfin.sh \$1" -'
		git config alias.hotfin '!sh -c "SEDREPLACE/hotfin.sh \$1" -'
		git config alias.supfin '!sh -c "SEDREPLACE/supfin.sh \$1" -'
		git config alias.pullrebase '!sh -c "SEDREPLACE/pullrebase.sh" -'
		git config alias.mergepush '!sh -c "git mergetool -y && git commit && git push origin && git push origin --tags" -'
		git config alias.globstat '!sh -c "SEDREPLACE/repostatus \$1" -'
		git config alias.bypass '!sh -c "SEDREPLACE/bypass.sh" -'
		# do this last so that we can replace multiple entries at once
		sed "s/SEDREPLACE/$sedReplace/g" .git/config 2>&1 > .git/config2
		mv .git/config2 .git/config

		git config guitool.0_Feature/0_Start.cmd 'git flow feature start $ARGS'
		git config guitool.0_Feature/0_Start.argprompt "Feature name (JIRA number)"
		git config "guitool.0_Feature/1_Submit for Code Review.cmd" 'git push origin HEAD:refs/for/develop/$CUR_BRANCH'
		git config guitool.0_Feature/2_Finish.cmd 'GIT_EDITOR=$(git config --get gui.editor) git featfin ${CUR_BRANCH#*/}'
		git config guitool.0_Feature/Publish.cmd 'git flow feature publish ${CUR_BRANCH#*/}'
		git config guitool.0_Feature/Track.cmd 'git flow feature track $ARGS'
		git config guitool.0_Feature/Track.argprompt "Name of the feature"

		git config guitool.1_Release/0_Start.cmd 'git flow release start $ARGS'
		git config guitool.1_Release/0_Start.argprompt "Name of the release"
		git config "guitool.1_Release/1_Submit for Code Review.cmd" 'git push origin HEAD:refs/for/$CUR_BRANCH'
		git config guitool.1_Release/2_Finish.cmd 'GIT_EDITOR=$(git config --get gui.editor) git release ${CUR_BRANCH#*/}'
		git config guitool.1_Release/Publish.cmd 'git flow release publish ${CUR_BRANCH#*/}'
		git config guitool.1_Release/Track.cmd 'git flow release track $ARGS'
		git config guitool.1_Release/Track.argprompt "Name of the release"

		git config guitool.2_Hotfix/0_Start.cmd 'git flow hotfix start $ARGS'
		git config guitool.2_Hotfix/0_Start.argprompt "Name of the fixed version"
		git config "guitool.2_Hotfix/1_Submit for Code Review.cmd" 'git push origin HEAD:refs/for/master/$CUR_BRANCH'
		git config guitool.2_Hotfix/2_Finish.cmd 'GIT_EDITOR=$(git config --get gui.editor) git hotfin ${CUR_BRANCH#*/}'

		git config guitool.3_Support/0_Start.cmd 'git flow support start $ARGS'
		git config guitool.3_Support/0_Start.argprompt "Name of the support branch and tag it is based on (e.g. '1.0 1.0')"
		git config "guitool.3_Support/1_Submit for Code Review.cmd" 'git push origin HEAD:refs/for/$CUR_BRANCH'
		git config guitool.3_Support/2_Finish.cmd 'GIT_EDITOR=$(git config --get gui.editor) git supfin $ARGS'
		git config guitool.3_Support/2_Finish.argprompt "Name of the new version"

		git config guitool.4_Rebase/Abort.cmd 'git rebase --abort'
		git config guitool.4_Rebase/Continue.cmd 'GIT_EDITOR=$(git config --get gui.editor) git rebase --continue'
		git config guitool.4_Rebase/Interactive.cmd 'GIT_EDITOR=$(git config --get gui.editor) git rebase -i $REVISION'
		git config guitool.4_Rebase/Interactive.revprompt yes
		git config guitool.4_Rebase/Update.cmd 'git pullrebase'

		git config "guitool.Advanced/Bypass Code Review.cmd" 'git bypass'
		git config "guitool.Visual Diff.cmd" 'git difftool -y HEAD $FILENAME'
		git config "guitool.Visual Diff.needsfile" yes
		git config "guitool.Visual Diff.noconsole" yes
		git config "guitool.Visual Merge.cmd" 'GIT_EDITOR=$(git config --get gui.editor) git mergetool -y'
		git config "guitool.Visual Merge.noconsole" yes
		git config "guitool.Visual Merge and Push.cmd" 'GIT_EDITOR=$(git config --get gui.editor) git mergepush'
		git config "guitool.Visual Merge.noconsole" yes

		git config "guitool.Global Repo Status.cmd" 'git globstat --no-colors'

		git config fwinit.aliasversion "$THISALIASVERSION"
	fi
	cd "$cwd"
}


basedir="$(getfwmetadirBootStrap)"
# On Windows we want to use getopt in our directory since the other one
# is broken
if [ "$OSTYPE" = "msys" ]; then
	GETOPT="$basedir/$TOOLSDIR/getopt"
else
	GETOPT="getopt"
fi

ORIG_ARGS=("$@")
OPTS=$($GETOPT -o h --long help --long debug --long recursive --long reset --long modify -n "$(basename "$0")" -- "$@")

eval set -- "$OPTS"

while true ; do
	case "$1" in
		-h|--help) help ; exit 0;;
		--debug) DEBUG=1 ;;
		--recursive) RECURSIVE=1 ;;
		--reset) reset=1 ;;
		--modify) modify=1 ;;
		--) shift; break;;
		*) echo "Internal error: Unknown argument $1!" ; exit 1 ;;
	esac
	shift
done

[ $DEBUG ] && echo -e "***************\nARGS=${ORIG_ARGS[@]}"

defaultbranches="master develop"
if [ "$OSTYPE" = "linux-gnu" ]; then
	defaultbranches+=" support/7.0-Linux"
fi

[ $DEBUG ] && echo "basedir=$basedir"
cd "$basedir"
if [ ! $RECURSIVE ]; then
	branchlist="$defaultbranches"
	[ $DEBUG ] && echo "Called non-recursive"
	if [ -d ".git" ] && git remote | grep -q origin ; then
		# fwmeta repo exists. Let's see if we're on a branch that has a tracking-branch.
		# If we are then update the repo, otherwise assume we're in the middle of
		# developing some changes, so we leave it alone.
		if git rev-parse --abbrev-ref --symbolic-full-name @{u} &> /dev/null; then
			echo "Updating $FWMETAREPO"
			git pull --rebase origin
		fi
	else
		# fwmeta repo doesn't exist yet. Clone it.
		echo "Cloning $FWMETAREPO"
		clonerepo $FWMETAREPO $FWMETAREPO

		basedir="$basedir/$FWMETAREPO"
		cd "$basedir"
	fi
	echo
	# recursive call so that we run with the latest version
	exec "$basedir/$TOOLSDIR/initrepo" --recursive "${ORIG_ARGS[@]}"
fi
[ $DEBUG ] && echo "Called recursively"

. "$basedir/$TOOLSDIR/functions.sh"
. "$basedir/$TOOLSDIR/repodefs.sh"

# Sanity checks
if ! git flow version &>/dev/null; then
	echo "Can't find git-flow. Please install."
	exit 1
fi

gerritusername=$(git config --get fwinit.gerrituser) || true
username=$(git config --get user.name) || true
useremail=$(git config --get user.email) || true
mergetool=$(git config --get merge.tool) || true
mergetool=${mergetool:-p4merge}

savevalues=false

# Query user for variables
if [ -z "$username" -o "$reset" = 1 ]; then
	username="${username:-$(fullname)}"
	username=$(readdefault "Full name" "$username")
	savevalues=true
fi
# Convert username to lowercase and replace spaces with underscore
# Note: we can't use ${username,,} to convert to lowercase because that's a bash 4.0 feature
# and so doesn't work on Windows
defname="$(echo ${username// /_} | tr '[A-Z]' '[a-z]')"
if [ -z "$useremail" -o "$reset" = 1 ]; then
	useremail="${useremail:-$defname@sil.org}"
	useremail=$(readdefault "Email address" "$useremail")
	savevalues=true
fi
if [ -z "$gerritusername" -o "$reset" = 1 ]; then
	gerritusername="${gerritusername:-$defname}"
	gerritusername=$(readdefault "Gerrit username" "${gerritusername}")
	savevalues=true
fi

if "$savevalues"; then
	# Store variables for later use
	git config --global user.name "$username"
	git config --global user.email "$useremail"
	git config --global fwinit.gerrituser "$gerritusername"
fi

if [ -z "$mergetool" -o "$reset" = 1 ]; then
	mergetool=$(readdefault "Merge tool [p4merge, kdiff3]" "$mergetool")
fi

repolist=$(git config --get fwinit.repolist) || true
repolist_orig=$repolist
[ "$reset" = 1 ] && repolist_orig=""
[ "$reset" = 1 -o "$modify" = 1 ] && repolist=""
if [ -z "$repolist" ]; then
	while [ -z "$repolist" ]
	do
		echo -e "${_bold}Available repos:${_normal} $(getAllReposForPlatform)"
		defaultlist="FieldWorks FwSampleProjects"
		if [ "$(platform)" = "Linux" ]; then
			defaultlist+=" mono mono-basic gtk-sharp libgdiplus libcom"
		fi
		if [ "$modify" = 1 ]; then
			echo -e "${_bold}Default repos:${_normal} $defaultlist"
			defaultlist=$repolist_orig
		fi
		repolist=$(readdefault "Repos to clone" "$defaultlist")
		for repo in $repolist; do
			if ! echo "$(getAllRepos)" | grep -E "(^| )$repo( |$)" >& /dev/null; then
				echo
				printf "${_bold}Can't find \"%q\". Please try again.${_normal}\n" $repo
				repolist=""
				break
			fi
		done
	done;

	git config fwinit.repolist "$repolist"
fi
branchlist=$(git config --get fwinit.branchlist) || true
branchlist_orig=$branchlist
[ "$reset" = 1 ] && branchlist_orig=""
[ "$reset" = 1 -o "$modify" = 1 ] && branchlist=""
if [ -z "$branchlist" ]; then
	if [ "$modify" = 1 ]; then
		echo -e "${_bold}Default branches:${_normal} $defaultbranches"
		defaultbranches=$branchlist_orig
	fi
	branchlist=$(readdefault "Branches to fetch" "$defaultbranches")
	git config fwinit.branchlist "$branchlist"
fi

initrepo $FWMETAREPO . "$basedir"

for repo in $repolist; do
	initrepo "$repo" "$(getDirForRepo $repo)" "$basedir"
done
